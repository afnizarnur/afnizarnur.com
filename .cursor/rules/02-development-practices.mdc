---
description: 
globs: 
alwaysApply: true
---
# Astro Development Practices

## Component Structure
Components follow this standard pattern:
```astro
---
// Props interface
interface Props {
  propName: string;
  optionalProp?: boolean;
}

// Destructure props with defaults
const {
  propName,
  optionalProp = false,
} = Astro.props;

// Component logic
const classes = `base-class ${optionalProp ? 'conditional-class' : ''}`;
---

<!-- Component template -->
<div class={classes}>
  <slot />
</div>
```

## Component Library
Common UI components are located in [src/components/ui/](mdc:src/components/ui):

- [Button.astro](mdc:src/components/ui/Button.astro): Buttons with variants and sizes
- [Card.astro](mdc:src/components/ui/Card.astro): Content cards with optional links
- [Container.astro](mdc:src/components/ui/Container.astro): Content container with max-width
- [Grid.astro](mdc:src/components/ui/Grid.astro): CSS Grid layout component
- [Heading.astro](mdc:src/components/ui/Heading.astro): Typography heading elements
- [Section.astro](mdc:src/components/ui/Section.astro): Content section with optional title
- [Stack.astro](mdc:src/components/ui/Stack.astro): Vertical stack with gap options

## General Practices
- Use `.astro` files for components by default
- Implement proper component composition and reusability
- Use Astro's component props for data passing
- Leverage built-in components when appropriate

## Performance Guidelines
- Minimize client-side JavaScript usage
- Use client:* directives strategically:
  - `client:load`: For immediately needed interactivity
  - `client:idle`: For non-critical interactivity
  - `client:visible`: For components that should hydrate when visible
- Implement proper lazy loading for images and assets
- Utilize Astro's built-in asset optimization

## TypeScript Usage
- Use TypeScript for enhanced type safety
- Define proper interfaces for component props
- Implement proper error handling and logging
- Follow Astro's Style Guide for consistent formatting

## Testing Requirements
- Implement unit tests for utility functions
- Use end-to-end testing with Cypress
- Implement visual regression testing when applicable
