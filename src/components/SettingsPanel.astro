---
import Icon from "./Icon.astro"
---

<div
	id="settings-panel"
	class="hidden absolute z-50 top-6 right-0 left-0 mx-auto p-[0_24px_24px_48px]"
	role="dialog"
	aria-labelledby="settings-panel-title"
>
	<div class="bg-border rounded-lg w-full">
		<div>
			<h3
				id="settings-panel-title"
				class="text-sm font-mono text-secondary uppercase font-normal p-4 pb-3 border-b border-surface"
			>
				THEME
			</h3>
			<div
				class="flex pt-0"
				role="radiogroup"
				aria-label="Theme selection"
			>
				<button
					class="w-[50px] h-[50px] flex items-center justify-center transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2"
					data-theme="system"
					aria-label="System theme"
					aria-checked="false"
					role="radio"
				>
					<Icon
						name="dark-light"
						class="w-5 h-5 text-primary theme-icon"
					/>
				</button>
				<button
					class="w-[50px] h-[50px] flex items-center justify-center transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2"
					data-theme="light"
					aria-label="Light theme"
					aria-checked="false"
					role="radio"
				>
					<Icon
						name="light"
						class="w-5 h-5 text-primary theme-icon"
					/>
				</button>
				<button
					class="w-[50px] h-[50px] flex items-center justify-center transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2"
					data-theme="dark"
					aria-label="Dark theme"
					aria-checked="false"
					role="radio"
				>
					<Icon name="dark" class="w-5 h-5 text-primary theme-icon" />
				</button>
				<button
					class="w-[50px] h-[50px] flex items-center justify-center transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2"
					data-theme="gray"
					aria-label="Gray theme"
					aria-checked="false"
					role="radio"
				>
					<div class="w-5 h-5 rounded-full bg-white border"></div>
				</button>
				<button
					class="w-[50px] h-[50px] flex items-center justify-center transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2"
					data-theme="pink"
					aria-label="Pink theme"
					aria-checked="false"
					role="radio"
				>
					<div class="w-5 h-5 rounded-full bg-pink-300"></div>
				</button>
				<button
					class="w-[50px] h-[50px] flex items-center justify-center transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2"
					data-theme="blue"
					aria-label="Blue theme"
					aria-checked="false"
					role="radio"
				>
					<div class="w-5 h-5 rounded-full bg-blue-300"></div>
				</button>
			</div>
		</div>

		<div>
			<h3
				class="text-sm font-mono text-secondary uppercase font-normal p-4 pb-3 border-b border-surface"
				id="font-size-controls"
			>
				FONT SIZE
			</h3>
			<div
				class="flex pt-0"
				role="toolbar"
				aria-labelledby="font-size-controls"
			>
				<button
					class="w-[50px] h-[50px] flex items-center justify-center transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2"
					id="font-decrease"
					aria-label="Decrease font size"
				>
					<Icon
						name="font-decrease"
						class="w-5 h-5 text-primary font-icon"
					/>
				</button>
				<button
					class="w-[50px] h-[50px] flex items-center justify-center transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2"
					id="font-default"
					aria-label="Default font size"
				>
					<Icon
						name="font-default"
						class="w-5 h-5 text-primary font-icon"
					/>
				</button>
				<button
					class="w-[50px] h-[50px] flex items-center justify-center transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2"
					id="font-increase"
					aria-label="Increase font size"
				>
					<Icon
						name="font-increase"
						class="w-5 h-5 text-primary font-icon"
					/>
				</button>
			</div>
		</div>
	</div>

	<script>
		// Theme switcher functionality
		const themeButtons = document.querySelectorAll("[data-theme]")
		const rootElement = document.documentElement
		let currentFontSize = 100 // Default 100%

		// Media query for detecting system color scheme
		const systemThemeMedia = window.matchMedia(
			"(prefers-color-scheme: dark)"
		)

		// Set active theme based on current setting
		const setActiveTheme = () => {
			const currentTheme = localStorage.getItem("theme") || "system"
			themeButtons.forEach((button) => {
				const buttonTheme = button.getAttribute("data-theme")
				const buttonIcon = button.querySelector(".theme-icon")
				const isActive = buttonTheme === currentTheme

				button.setAttribute("aria-checked", isActive.toString())

				if (isActive) {
					if (buttonIcon) {
						buttonIcon.classList.add("opacity-50")
					}
				} else {
					if (buttonIcon) {
						buttonIcon.classList.remove("opacity-50")
					}
				}
			})
		}

		// Apply the appropriate theme
		const applyTheme = () => {
			const savedTheme = localStorage.getItem("theme")

			if (savedTheme) {
				// User has explicitly selected a theme
				rootElement.setAttribute("data-theme", savedTheme)
			} else {
				// Use system preference
				const systemTheme = systemThemeMedia.matches ? "dark" : "light"
				rootElement.setAttribute("data-theme", "system")
			}
		}

		// Listen for system preference changes
		systemThemeMedia.addEventListener("change", (e) => {
			// Only apply if user is using system theme
			if (!localStorage.getItem("theme")) {
				applyTheme()
				announceChange(
					`Theme changed to ${e.matches ? "dark" : "light"} based on system preference`
				)
			}
		})

		// Update theme when buttons are clicked
		themeButtons.forEach((button) => {
			button.addEventListener("click", () => {
				const theme = button.getAttribute("data-theme")

				if (theme === "system") {
					localStorage.removeItem("theme")
					applyTheme()
				} else if (theme) {
					localStorage.setItem("theme", theme)
					rootElement.setAttribute("data-theme", theme)
				}

				setActiveTheme()
				// Announce theme change to screen readers
				const announcer = document.createElement("div")
				announcer.setAttribute("aria-live", "polite")
				announcer.classList.add("sr-only")
				announcer.textContent = `Theme changed to ${theme}`
				document.body.appendChild(announcer)
				setTimeout(() => document.body.removeChild(announcer), 1000)
			})
		})

		// Font size functionality
		const fontDecreaseButton = document.getElementById("font-decrease")
		const fontDefaultButton = document.getElementById("font-default")
		const fontIncreaseButton = document.getElementById("font-increase")

		// Load saved font size or use default
		const loadFontSize = () => {
			const savedFontSize = localStorage.getItem("fontSize")
			if (savedFontSize) {
				currentFontSize = parseInt(savedFontSize)
				applyFontSize()
			}
		}

		// Apply font size to html element
		const applyFontSize = () => {
			rootElement.style.fontSize = `${currentFontSize}%`
			localStorage.setItem("fontSize", currentFontSize.toString())
		}

		// Add event listeners for font size buttons
		fontDecreaseButton?.addEventListener("click", () => {
			if (currentFontSize > 80) {
				currentFontSize -= 10
				applyFontSize()
				announceChange(`Font size decreased to ${currentFontSize}%`)
			}
		})

		fontDefaultButton?.addEventListener("click", () => {
			currentFontSize = 100
			applyFontSize()
			announceChange("Font size reset to default")
		})

		fontIncreaseButton?.addEventListener("click", () => {
			if (currentFontSize < 120) {
				currentFontSize += 10
				applyFontSize()
				announceChange(`Font size increased to ${currentFontSize}%`)
			}
		})

		// Function to announce changes to screen readers
		function announceChange(message) {
			const announcer = document.createElement("div")
			announcer.setAttribute("aria-live", "polite")
			announcer.classList.add("sr-only")
			announcer.textContent = message
			document.body.appendChild(announcer)
			setTimeout(() => document.body.removeChild(announcer), 1000)
		}

		// Initialize
		setActiveTheme()
		applyTheme()
		loadFontSize()

		// Add keyboard event handling
		document.addEventListener("keydown", (e) => {
			if (e.key === "Escape") {
				const menuToggle = document.getElementById("menu-toggle")
				const settingsPanel = document.getElementById("settings-panel")

				if (
					settingsPanel &&
					!settingsPanel.classList.contains("hidden")
				) {
					settingsPanel.classList.add("hidden")
					menuToggle?.classList.remove("opened")
					menuToggle?.setAttribute("aria-expanded", "false")
					// Return focus to toggle button
					menuToggle?.focus()
				}
			}
		})
	</script>
</div>
