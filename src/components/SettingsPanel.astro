---
import Icon from "./Icon.astro"
---

<div
	id="settings-panel"
	class="hidden absolute z-50 top-4 right-0 left-0 mx-auto p-[0_24px_24px_48px]"
>
	<div class="bg-border rounded-lg w-full">
		<div>
			<h3
				class="text-sm font-mono text-secondary uppercase font-normal p-4 pb-3 border-b border-disabled"
			>
				THEME
			</h3>
			<div class="flex pt-0">
				<button
					class="w-[50px] h-[50px] flex items-center justify-center transition-colors"
					data-theme="system"
					aria-label="System theme"
				>
					<Icon
						name="dark-light"
						class="w-5 h-5 text-primary theme-icon"
					/>
				</button>
				<button
					class="w-[50px] h-[50px] flex items-center justify-center transition-colors"
					data-theme="light"
					aria-label="Light theme"
				>
					<Icon
						name="light"
						class="w-5 h-5 text-primary theme-icon"
					/>
				</button>
				<button
					class="w-[50px] h-[50px] flex items-center justify-center transition-colors"
					data-theme="dark"
					aria-label="Dark theme"
				>
					<Icon name="dark" class="w-5 h-5 text-primary theme-icon" />
				</button>
				<button
					class="w-[50px] h-[50px] flex items-center justify-center transition-colors"
					data-theme="gray"
					aria-label="Gray theme"
				>
					<div class="w-5 h-5 rounded-full bg-white border"></div>
				</button>
				<button
					class="w-[50px] h-[50px] flex items-center justify-center transition-colors"
					data-theme="pink"
					aria-label="Pink theme"
				>
					<div class="w-5 h-5 rounded-full bg-pink-300"></div>
				</button>
				<button
					class="w-[50px] h-[50px] flex items-center justify-center transition-colors"
					data-theme="blue"
					aria-label="Blue theme"
				>
					<div class="w-5 h-5 rounded-full bg-blue-300"></div>
				</button>
			</div>
		</div>

		<div>
			<h3
				class="text-sm font-mono text-secondary uppercase font-normal p-4 pb-3 border-b border-disabled"
			>
				FONT SIZE
			</h3>
			<div class="flex pt-0">
				<button
					class="w-[50px] h-[50px] flex items-center justify-center transition-colors"
					id="font-decrease"
					aria-label="Decrease font size"
				>
					<Icon
						name="font-decrease"
						class="w-5 h-5 text-primary font-icon"
					/>
				</button>
				<button
					class="w-[50px] h-[50px] flex items-center justify-center transition-colors"
					id="font-default"
					aria-label="Default font size"
				>
					<Icon
						name="font-default"
						class="w-5 h-5 text-primary font-icon"
					/>
				</button>
				<button
					class="w-[50px] h-[50px] flex items-center justify-center transition-colors"
					id="font-increase"
					aria-label="Increase font size"
				>
					<Icon
						name="font-increase"
						class="w-5 h-5 text-primary font-icon"
					/>
				</button>
			</div>
		</div>
	</div>

	<script>
		// Theme switcher functionality
		const themeButtons = document.querySelectorAll("[data-theme]")
		const rootElement = document.documentElement
		let currentFontSize = 100 // Default 100%

		// Set active theme based on current setting
		const setActiveTheme = () => {
			const savedTheme = localStorage.getItem("theme")
			const currentTheme = savedTheme || "system" // If no saved theme, we're using system

			themeButtons.forEach((button) => {
				const buttonTheme = button.getAttribute("data-theme")
				const buttonIcon =
					button.querySelector(".theme-icon") ||
					button.querySelector("div")

				// Mark the button as active if it matches the current theme
				if (buttonTheme === currentTheme) {
					button.classList.add("active-theme")
					if (buttonIcon) {
						buttonIcon.classList.add("opacity-50")
					}
				} else {
					button.classList.remove("active-theme")
					if (buttonIcon) {
						buttonIcon.classList.remove("opacity-50")
					}
				}
			})
		}

		// Update theme when buttons are clicked
		themeButtons.forEach((button) => {
			button.addEventListener("click", () => {
				const theme = button.getAttribute("data-theme")

				if (theme === "system") {
					localStorage.removeItem("theme")
					// Set to system theme for proper tracking
					rootElement.setAttribute("data-theme", "system")
					// Then apply the actual light/dark based on system preference
					applySystemTheme()
				} else if (theme) {
					localStorage.setItem("theme", theme)
					rootElement.setAttribute("data-theme", theme)
				}

				// Use the setActiveTheme function to update the UI
				setActiveTheme()
			})
		})

		// Function to apply the system theme based on user's preference
		const applySystemTheme = () => {
			const isDark = window.matchMedia(
				"(prefers-color-scheme: dark)"
			).matches
			const systemThemeValue = isDark ? "dark" : "light"

			// Keep the data-theme="system" attribute, but add a secondary class for styling
			rootElement.classList.remove("dark", "light")
			rootElement.classList.add(`${systemThemeValue}`)
		}

		// Font size functionality
		const fontDecreaseButton = document.getElementById("font-decrease")
		const fontDefaultButton = document.getElementById("font-default")
		const fontIncreaseButton = document.getElementById("font-increase")

		// Load saved font size or use default
		const loadFontSize = () => {
			const savedFontSize = localStorage.getItem("fontSize")
			if (savedFontSize) {
				currentFontSize = parseInt(savedFontSize)
				applyFontSize()
			}
		}

		// Apply font size to html element
		const applyFontSize = () => {
			rootElement.style.fontSize = `${currentFontSize}%`
			localStorage.setItem("fontSize", currentFontSize.toString())
		}

		// Add event listeners for font size buttons
		fontDecreaseButton?.addEventListener("click", () => {
			if (currentFontSize > 80) {
				currentFontSize -= 10
				applyFontSize()
			}
		})

		fontDefaultButton?.addEventListener("click", () => {
			currentFontSize = 100
			applyFontSize()
		})

		fontIncreaseButton?.addEventListener("click", () => {
			if (currentFontSize < 120) {
				currentFontSize += 10
				applyFontSize()
			}
		})

		// Initialize
		loadFontSize()

		// Apply the correct theme on page load and set active button
		const initializeTheme = () => {
			const savedTheme = localStorage.getItem("theme")

			// Apply the theme to the document
			if (savedTheme) {
				rootElement.setAttribute("data-theme", savedTheme)
			} else {
				// System theme
				rootElement.setAttribute("data-theme", "system")
				applySystemTheme()
			}

			// Set the active button
			setActiveTheme()
		}

		initializeTheme()

		// Listen for system theme changes
		window
			.matchMedia("(prefers-color-scheme: dark)")
			.addEventListener("change", (event) => {
				if (!localStorage.getItem("theme")) {
					// Only respond if using system theme
					applySystemTheme()
				}
			})
	</script>
</div>
