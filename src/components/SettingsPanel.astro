---
import {
	DarkLightIcon,
	LightIcon,
	DarkIcon,
	FontDecreaseIcon,
	FontDefaultIcon,
	FontIncreaseIcon
} from "./icons"
---

<div
	id="settings-panel"
	class="hidden absolute z-50 top-6 right-0 left-0 mx-auto pt-0 pr-6 pb-6 pl-6"
	role="dialog"
	aria-labelledby="settings-panel-title"
	aria-modal="true"
>
	<div class="bg-surface rounded-lg w-full overflow-hidden">
		<div class="mb-4">
			<h3
				id="settings-panel-title"
				class="text-sm font-mono text-secondary uppercase font-normal p-4 pb-3 border-b border-disabled mb-0"
			>
				THEME
			</h3>
			<div
				class="flex md:grid md:grid-cols-3 md:gap-0 pt-0"
				role="radiogroup"
				aria-label="Theme selection"
			>
				<button
					class="w-[50px] md:w-full h-[50px] flex items-center justify-center transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 md:border-b md:border-r md:border-disabled hover:bg-surface-hover"
					data-theme="system"
					aria-label="System theme"
					aria-checked="false"
					role="radio"
				>
					<DarkLightIcon class="w-5 h-5 text-primary theme-icon" />
				</button>
				<button
					class="w-[50px] md:w-full h-[50px] flex items-center justify-center transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 md:border-b md:border-r md:border-disabled hover:bg-surface-hover"
					data-theme="light"
					aria-label="Light theme"
					aria-checked="false"
					role="radio"
				>
					<LightIcon class="w-5 h-5 text-primary theme-icon" />
				</button>
				<button
					class="w-[50px] md:w-full h-[50px] flex items-center justify-center transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 md:border-b md:border-disabled hover:bg-surface-hover"
					data-theme="dark"
					aria-label="Dark theme"
					aria-checked="false"
					role="radio"
				>
					<DarkIcon class="w-5 h-5 text-primary theme-icon" />
				</button>
				<button
					class="w-[50px] md:w-full h-[50px] flex items-center justify-center transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 md:border-b md:border-r md:border-disabled hover:bg-surface-hover"
					data-theme="gray"
					aria-label="Gray theme"
					aria-checked="false"
					role="radio"
				>
					<div class="w-5 h-5 rounded-full bg-white border"></div>
				</button>
				<button
					class="w-[50px] md:w-full h-[50px] flex items-center justify-center transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 md:border-b md:border-r md:border-disabled hover:bg-surface-hover"
					data-theme="pink"
					aria-label="Pink theme"
					aria-checked="false"
					role="radio"
				>
					<div class="w-5 h-5 rounded-full bg-pink-300"></div>
				</button>
				<button
					class="w-[50px] md:w-full h-[50px] flex items-center justify-center transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 md:border-b md:border-disabled hover:bg-surface-hover"
					data-theme="blue"
					aria-label="Blue theme"
					aria-checked="false"
					role="radio"
				>
					<div class="w-5 h-5 rounded-full bg-blue-300"></div>
				</button>
			</div>
		</div>

		<div>
			<h3
				class="text-sm font-mono text-secondary uppercase font-normal p-4 pb-3 border-b border-disabled mb-0"
				id="font-size-controls"
			>
				FONT SIZE
			</h3>
			<div
				class="flex md:grid md:grid-cols-3 md:gap-0 pt-0"
				role="toolbar"
				aria-labelledby="font-size-controls"
			>
				<button
					class="w-[50px] md:w-full h-[50px] flex items-center justify-center transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 md:border-r md:border-disabled hover:bg-surface-hover"
					id="font-decrease"
					aria-label="Decrease font size"
				>
					<FontDecreaseIcon class="w-5 h-5 text-primary font-icon" />
				</button>
				<button
					class="w-[50px] md:w-full h-[50px] flex items-center justify-center transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 md:border-r md:border-disabled hover:bg-surface-hover"
					id="font-default"
					aria-label="Default font size"
				>
					<FontDefaultIcon class="w-5 h-5 text-primary font-icon" />
				</button>
				<button
					class="w-[50px] md:w-full h-[50px] flex items-center justify-center transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 hover:bg-surface-hover"
					id="font-increase"
					aria-label="Increase font size"
				>
					<FontIncreaseIcon class="w-5 h-5 text-primary font-icon" />
				</button>
			</div>
		</div>
	</div>

	<script>
		// Theme switcher functionality
		const themeButtons =
			document.querySelectorAll<HTMLButtonElement>("[data-theme]")
		const rootElement = document.documentElement
		let currentFontSize = 100 // Default 100%
		const settingsPanel = document.getElementById("settings-panel")
		const menuToggle = document.getElementById("menu-toggle")

		// Media query for detecting system color scheme
		const systemThemeMedia = window.matchMedia(
			"(prefers-color-scheme: dark)"
		)

		// Focus trap variables
		let focusableElements: HTMLElement[] = []
		let firstFocusableElement: HTMLElement | null = null
		let lastFocusableElement: HTMLElement | null = null

		// Set up focus trap when panel is opened
		const setupFocusTrap = () => {
			if (!settingsPanel) return

			// Get all focusable elements within the panel
			const elements = settingsPanel.querySelectorAll<HTMLElement>(
				'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
			)

			focusableElements = Array.from(elements)

			if (focusableElements.length) {
				firstFocusableElement = focusableElements[0]
				lastFocusableElement =
					focusableElements[focusableElements.length - 1]

				// Focus the first element when panel opens
				firstFocusableElement.focus()
			}
		}

		// Set active theme based on current setting
		const setActiveTheme = () => {
			const currentTheme = localStorage.getItem("theme") || "system"
			themeButtons.forEach((button) => {
				const buttonTheme = button.getAttribute("data-theme")
				const buttonIcon = button.querySelector(".theme-icon")
				const isActive = buttonTheme === currentTheme

				// Update ARIA state and visual indication
				button.setAttribute("aria-checked", isActive ? "true" : "false")

				if (isActive) {
					if (buttonIcon) {
						buttonIcon.classList.add("opacity-50")
					}
				} else {
					if (buttonIcon) {
						buttonIcon.classList.remove("opacity-50")
					}
				}
			})
		}

		// Apply the appropriate theme
		const applyTheme = () => {
			const savedTheme = localStorage.getItem("theme")

			if (savedTheme) {
				// User has explicitly selected a theme
				rootElement.setAttribute("data-theme", savedTheme)
			} else {
				// Use system preference
				rootElement.setAttribute("data-theme", "system")
			}
		}

		// Listen for system preference changes
		systemThemeMedia.addEventListener("change", () => {
			// Only apply if user is using system theme
			if (!localStorage.getItem("theme")) {
				applyTheme()
			}
		})

		// Manage keyboard events for radiogroup
		const handleRadioKeydown = (
			event: KeyboardEvent,
			currentButton: HTMLButtonElement
		) => {
			const buttons = Array.from(themeButtons)
			const currentIndex = buttons.indexOf(currentButton)
			let nextIndex = currentIndex

			switch (event.key) {
				case "ArrowRight":
				case "ArrowDown":
					event.preventDefault()
					nextIndex = (currentIndex + 1) % buttons.length
					break
				case "ArrowLeft":
				case "ArrowUp":
					event.preventDefault()
					nextIndex =
						(currentIndex - 1 + buttons.length) % buttons.length
					break
				case " ":
				case "Enter":
					event.preventDefault()
					currentButton.click()
					return
				default:
					return
			}

			const nextButton = buttons[nextIndex]
			if (nextButton) {
				nextButton.focus()
			}
		}

		// Update theme when buttons are clicked
		themeButtons.forEach((button) => {
			button.addEventListener("click", () => {
				const theme = button.getAttribute("data-theme")

				if (theme === "system") {
					localStorage.removeItem("theme")
					applyTheme()
				} else if (theme) {
					localStorage.setItem("theme", theme)
					rootElement.setAttribute("data-theme", theme)
				}

				setActiveTheme()
			})

			// Add keyboard navigation for radio group
			button.addEventListener("keydown", (event) => {
				handleRadioKeydown(event as KeyboardEvent, button)
			})
		})

		// Font size functionality
		const fontDecreaseButton = document.getElementById(
			"font-decrease"
		) as HTMLButtonElement | null
		const fontDefaultButton = document.getElementById(
			"font-default"
		) as HTMLButtonElement | null
		const fontIncreaseButton = document.getElementById(
			"font-increase"
		) as HTMLButtonElement | null

		// Load saved font size or use default
		const loadFontSize = () => {
			const savedFontSize = localStorage.getItem("fontSize")
			if (savedFontSize) {
				currentFontSize = parseInt(savedFontSize)
				applyFontSize()
			}
		}

		// Apply font size to html element
		const applyFontSize = () => {
			rootElement.style.fontSize = `${currentFontSize}%`
			localStorage.setItem("fontSize", currentFontSize.toString())
		}

		// Add event listeners for font size buttons
		fontDecreaseButton?.addEventListener("click", () => {
			if (currentFontSize > 80) {
				currentFontSize -= 10
				applyFontSize()
			}
		})

		fontDefaultButton?.addEventListener("click", () => {
			currentFontSize = 100
			applyFontSize()
		})

		fontIncreaseButton?.addEventListener("click", () => {
			if (currentFontSize < 120) {
				currentFontSize += 10
				applyFontSize()
			}
		})

		// Handle tab key for focus trap
		document.addEventListener("keydown", (e) => {
			if (settingsPanel && !settingsPanel.classList.contains("hidden")) {
				if (e.key === "Escape") {
					// Close panel and return focus to toggle button
					settingsPanel.classList.add("hidden")
					menuToggle?.classList.remove("opened")
					menuToggle?.setAttribute("aria-expanded", "false")
					menuToggle?.focus()
					return
				}

				// Focus trap logic
				if (
					e.key === "Tab" &&
					firstFocusableElement &&
					lastFocusableElement
				) {
					// If shift key pressed for reverse tabbing
					if (e.shiftKey) {
						if (document.activeElement === firstFocusableElement) {
							e.preventDefault()
							lastFocusableElement.focus()
						}
					} else {
						if (document.activeElement === lastFocusableElement) {
							e.preventDefault()
							firstFocusableElement.focus()
						}
					}
				}
			}
		})

		// Listen for panel opening
		const observer = new MutationObserver((mutations) => {
			mutations.forEach((mutation) => {
				if (mutation.attributeName === "class" && settingsPanel) {
					if (!settingsPanel.classList.contains("hidden")) {
						// Panel was just opened
						setupFocusTrap()
						setActiveTheme()
					}
				}
			})
		})

		if (settingsPanel) {
			observer.observe(settingsPanel, { attributes: true })
		}

		// Initialize
		setActiveTheme()
		applyTheme()
		loadFontSize()
	</script>
</div>
