---
import LinkWithArrow from "./LinkWithArrow.astro"

interface Props {
	href?: string
	className?: string
	color?: string
	aspectRatio?: string
	isHoverable?: boolean
	title?: string
	openInNewTab?: boolean
}

const {
	href,
	className = "",
	color = "bg-surface",
	aspectRatio = "aspect-[4/3]",
	isHoverable = true,
	title,
	openInNewTab = false
} = Astro.props

const wrapperClasses = `flex flex-col h-full ${className}`
const imageClasses = `${color} ${aspectRatio} rounded-2xl`
---

{
	href ? (
		<div class={wrapperClasses}>
			<a
				href={href}
				{...(openInNewTab
					? { target: "_blank", rel: "noopener noreferrer" }
					: {})}
				class="block focus-ring rounded-2xl mb-5"
				aria-labelledby={
					title
						? `card-title-${title.replace(/\s+/g, "-").toLowerCase()}`
						: undefined
				}
			>
				<div class={imageClasses}>
					<slot name="image" />
				</div>
			</a>
			<div class="card-content">
				{title && (
					<h3
						id={`card-title-${title.replace(/\s+/g, "-").toLowerCase()}`}
					>
						<LinkWithArrow
							href={href}
							text={title}
							openInNewTab={openInNewTab}
						/>
					</h3>
				)}
				<slot />
			</div>
		</div>
	) : (
		<div class={wrapperClasses}>
			<div class={imageClasses}>
				<slot name="image" />
			</div>
			<div class="card-content">
				{title && (
					<h3
						id={`card-title-${title.replace(/\s+/g, "-").toLowerCase()}`}
					>
						{title}
					</h3>
				)}
				<slot />
			</div>
		</div>
	)
}

<style>
	.card-content :global(h3) {
		@apply text-primary mb-2 font-sans text-body;
	}

	.card-content :global(p) {
		@apply text-secondary;
	}
</style>
