---
import { socialLinks } from "../config/social"
---

<div class="flex flex-col h-full justify-between">
	<div>
		<div class="text-stack mb-6" id="sidebarTitle">
			<div class="stack-container">
				<div class="stack-item primary-content">
					<h1 class="original-text mb-0">Afnizar<br />Nur Ghifari</h1>
				</div>
				<div class="stack-item tools-content">
					<h1 class="alternate-text mb-0">Design<br />Tools</h1>
				</div>
			</div>
		</div>

		<div class="text-stack" id="sidebarDescription">
			<div class="stack-container">
				<div class="stack-item primary-content">
					<p class="body text-secondary original-text md:mb-2 mb-9">
						Currently, I'm working at GovTech Edu, where I design
						platforms for Rapor Pendidikan. Prior to this, I gained
						valuable experience working on product design for
						Bukalapak, startups, and with various agencies.
					</p>
				</div>
				<div class="stack-item tools-content">
					<p class="body text-secondary alternate-text mb-2 md:mb-9">
						I use various design tools to create meaningful and
						impactful digital experiences. From wireframing to
						high-fidelity prototypes, these are the tools I rely on
						daily.
					</p>
				</div>
			</div>
		</div>
	</div>

	<div class="mt-auto mb-0">
		<div class="flex gap-4 items-center mb-9">
			{
				socialLinks.map(({ url, icon: Icon, ariaLabel }) => (
					<a
						href={url}
						target="_blank"
						rel="noopener noreferrer"
						aria-label={ariaLabel}
						class="text-primary hover:text-secondary transition-colors"
					>
						<Icon class="w-5 h-5" />
					</a>
				))
			}
		</div>
		<p class="text-sm text-disabled">
			Typeset in <a
				href="https://www.tokotype.com/retail-fonts/aksen"
				class="underline text-disabled transition-colors">Aksen</a
			>, <a
				href="https://www.tokotype.com/retail-fonts/fonetika-mono"
				class="underline text-disabled transition-colors"
				>Fonetika Mono</a
			> and <a
				href="https://rsms.me/inter/"
				class="underline text-disabled transition-colors">Inter</a
			>.
			<br />Developed with Astro from Serang, Indonesia.
		</p>
	</div>
</div>

<script>
	import { gsap } from "gsap"
	import { ScrollTrigger } from "gsap/ScrollTrigger"

	// Consider both mobile and tablet as small screens (anything below 1024px)
	const isSmallScreen = window.innerWidth < 1024

	// Small screen setup - show primary content without animation
	if (isSmallScreen) {
		const stacks = document.querySelectorAll(".text-stack")

		stacks.forEach((stack) => {
			const container = stack.querySelector(".stack-container")
			const primaryContent = stack.querySelector(
				".stack-item.primary-content"
			)
			const toolsContent = stack.querySelector(
				".stack-item.tools-content"
			)

			if (
				container instanceof HTMLElement &&
				primaryContent instanceof HTMLElement &&
				toolsContent instanceof HTMLElement
			) {
				// Reset container height
				container.style.height = "auto"

				// Show only primary content
				primaryContent.style.position = "relative"
				primaryContent.style.height = "auto"

				// Hide tools content
				toolsContent.style.display = "none"
			}
		})
	}
	// Desktop setup with animations
	else {
		gsap.registerPlugin(ScrollTrigger)

		const stacks = document.querySelectorAll(".text-stack")

		// Function to set stack heights and positions
		function setupStacks() {
			stacks.forEach((stack) => {
				const container = stack.querySelector(".stack-container")
				const items = stack.querySelectorAll(".stack-item")

				if (container instanceof HTMLElement && items.length > 0) {
					// Reset container height first
					container.style.height = "auto"

					// Calculate the maximum height among items
					let maxHeight = 0
					items.forEach((item) => {
						if (item instanceof HTMLElement) {
							const height = item.offsetHeight
							maxHeight = Math.max(maxHeight, height)
						}
					})

					// Set heights and positions
					container.style.height = `${maxHeight}px`
					items.forEach((item, index) => {
						if (item instanceof HTMLElement) {
							item.style.height = `${maxHeight}px`
							gsap.set(item, {
								position: "absolute",
								top: 0,
								y: `${index * 100}%`
							})
						}
					})
				}
			})
		}

		// Initial setup
		setupStacks()

		// Update on window resize
		window.addEventListener("resize", () => {
			if (window.innerWidth >= 1024) {
				setupStacks()
			}
		})

		ScrollTrigger.create({
			trigger: "#tools-section",
			start: "top center",
			end: "bottom center",
			onEnter: () => {
				stacks.forEach((stack) => {
					const items = stack.querySelectorAll(".stack-item")
					if (items.length >= 2) {
						gsap.to(items[0], {
							y: "-100%",
							duration: 0.5,
							ease: "circ.out"
						})
						gsap.to(items[1], {
							y: "0%",
							duration: 0.5,
							ease: "circ.out"
						})
					}
				})
			},
			onLeaveBack: () => {
				stacks.forEach((stack) => {
					const items = stack.querySelectorAll(".stack-item")
					if (items.length >= 2) {
						gsap.to(items[0], {
							y: "0%",
							duration: 0.5,
							ease: "circ.out"
						})
						gsap.to(items[1], {
							y: "100%",
							duration: 0.5,
							ease: "circ.out"
						})
					}
				})
			}
		})
	}

	// Handle resize to switch between small screen and desktop layouts
	window.addEventListener("resize", () => {
		const wasSmallScreen = isSmallScreen
		const isNowSmallScreen = window.innerWidth < 1024

		// Only reload if there's a change between small screen and desktop
		if (wasSmallScreen !== isNowSmallScreen && window.location.reload) {
			window.location.reload()
		}
	})
</script>

<style>
	.text-stack {
		position: relative;
		overflow: hidden;
	}

	/* Gradient effect
	.text-stack::before,
	.text-stack::after {
		content: "";
		position: absolute;
		left: 0;
		right: 0;
		height: 12px;
		pointer-events: none;
		z-index: 1;
	}

	.text-stack::before {
		top: 0;
		background: linear-gradient(
			to bottom,
			var(--background-default) 0%,
			transparent 100%
		);
	}

	.text-stack::after {
		bottom: 0;
		background: linear-gradient(
			to top,
			var(--background-default) 0%,
			transparent 100%
		);
	} */

	.stack-container {
		position: relative;
		width: 100%;
	}

	.stack-item {
		width: 100%;
		display: flex;
		align-items: flex-start;
	}

	/* Initial state - Hide tools content by default to prevent flash */
	.stack-item.tools-content {
		display: none;
	}

	/* Default styles for small screens - only primary content visible */
	.stack-item.primary-content {
		position: relative;
	}

	/* Desktop styles */
	@media (min-width: 1024px) {
		.stack-item {
			position: absolute;
			top: 0;
			left: 0;
		}

		/* On desktop, show both items for animation */
		.stack-item.tools-content {
			display: flex;
			transform: translateY(100%);
		}

		.stack-item.primary-content {
			transform: translateY(0);
		}
	}

	.stack-item h1,
	.stack-item p {
		width: 100%;
	}

	.stack-item h1 {
		line-height: 1.1;
		margin-top: 8px;
	}

	.stack-item h1 br {
		line-height: 0.9;
	}

	.stack-item p {
		line-height: 1.5;
		margin-top: 8px;
	}

	#sidebarTitle .stack-item,
	#sidebarDescription .stack-item {
		padding-top: 0;
	}
</style>
